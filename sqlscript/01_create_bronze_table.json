{
	"name": "01_create_bronze_table",
	"properties": {
		"folder": {
			"name": "electric_vehicle/ldw/virtualization"
		},
		"content": {
			"query": "USE electric_vehicle_ldw\nGO\n\n--crea todas las tablas del \"esquema bronze\" del SQL Database Serveless\nIF OBJECT_ID('bronze.vehicle') IS NOT NULL DROP EXTERNAL TABLE bronze.vehicle;  --si existe la tabla externa, la elimina\n CREATE EXTERNAL TABLE bronze.vehicle\n    ( \n        vehicleId         INT,\n        vin               VARCHAR(10),\n        modelYear         SMALLINT,\n        make              VARCHAR(25),\n        model             VARCHAR(25),\n        electricRange     SMALLINT,\n        baseMSRP          INT,\n        vehicheTypeId     SMALLINT,\n        cafvEligibilityId SMALLINT,\n        vehicleLocation   VARCHAR(30)\n    )\n    WITH (\n        LOCATION = 'bronze/vehicle.csv',       \n        DATA_SOURCE = electric_vehicle_src,             --https://entixcoviddl.dfs.core.windows.net/electric-vehicle-data/\n        FILE_FORMAT = csv_file_format,\n        REJECT_VALUE = 10,                              --cantidad de datos maximo rechazados (muestra)\n        REJECTED_ROW_LOCATION = 'rejections/vehicle'    --ubicacion para los datos rechazados (erroneos)\n    )\n;\n\n\n--selecciona los datos de la tabla creada\nSELECT top(100) * FROM bronze.vehicle;\n\n\n--CREACION DE LA TABLA calendar\nIF OBJECT_ID('bronze.calendar') IS NOT NULL DROP EXTERNAL TABLE bronze.calendar; \nCREATE EXTERNAL TABLE bronze.calendar(\n    dateKey INT,\n    date DATE,\n    year SMALLINT,\n    month TINYINT,\n    day TINYINT,\n    monthName VARCHAR(10),\n    dayName VARCHAR(10),\n    dayOfYear SMALLINT,\n    weekOfMonth TINYINT,\n    weekOfYear TINYINT\n)\n    WITH (\n        LOCATION = 'bronze/calendar.csv',       \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format_v2,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/calendar'\n    )\n;\n\nSELECT top(100) * FROM bronze.calendar;\n\n\n\n--CREACION DE LA TABLA location\nIF OBJECT_ID('bronze.location') IS NOT NULL DROP EXTERNAL TABLE bronze.location; \nCREATE EXTERNAL TABLE bronze.location(\n    locationId              INT,\n    county                  VARCHAR(100),\n    city                    VARCHAR(100),\n    state                   VARCHAR(2),\n    postalCode              INT,\n    legislativeDistrict     INT,\n    censusTract             BIGINT\n)\n    WITH (\n        LOCATION = 'bronze/location.csv',       \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format_v3,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/location'\n    )\n;\n\nSELECT top(100) * FROM bronze.location;\n\n\n\n--CREACION DE LA TABLA propietary\nIF OBJECT_ID('bronze.propietary') IS NOT NULL DROP EXTERNAL TABLE bronze.propietary; \nCREATE EXTERNAL TABLE bronze.propietary(\n    propietary_id              INT,\n    electric_utility           VARCHAR(200)\n)\n    WITH (\n        LOCATION = 'bronze/propietary.tsv',       \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = tsv_file_format,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/propietary'\n    )\n;\n\nSELECT top(100) * FROM bronze.propietary;\n\n\n\n--CREACION DE LA TABLA vehicle_registration_csv\nIF OBJECT_ID('bronze.vehicle_registration_csv') IS NOT NULL DROP EXTERNAL TABLE bronze.vehicle_registration_csv; \nCREATE EXTERNAL TABLE bronze.vehicle_registration_csv(\n    vehicleId           INT,\n    locationId          SMALLINT,\n    propietary_id       TINYINT,\n    dol_vehicle_id      INT,\n    registration_date   DATETIME2(7)     \n)\n    WITH (\n        LOCATION = 'bronze/vehicle_registration_csv/**',      --selecciona todos los archivos dentro de dos subniveles dentro del directorio \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = csv_file_format,\n    )\n;\n\nSELECT top(100) * FROM bronze.vehicle_registration_csv\nWHERE year(registration_date) = 2025 AND month(registration_date) = 2;\n\n\n--CREACION DE LA TABLA vehicle_registration_parquet\nIF OBJECT_ID('bronze.vehicle_registration_parquet') IS NOT NULL DROP EXTERNAL TABLE bronze.vehicle_registration_parquet; \nCREATE EXTERNAL TABLE bronze.vehicle_registration_parquet(\n    vehicleId           INT,\n    locationId          SMALLINT,\n    propietaryId        TINYINT,\n    dolVehicleId        INT,\n    registrationDate    DATETIME2(7)     \n)\n    WITH (\n        LOCATION = 'bronze/vehicle_registration_parquet/**',      --selecciona todos los archivos dentro de dos subniveles dentro del directorio \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = parquet_file_format,\n    )\n;\n\nSELECT TOP(100) * FROM bronze.vehicle_registration_parquet;\n\n\n\n\n--CREACION DE LA TABLA vehicle_registration_delta\nIF OBJECT_ID('bronze.vehicle_registration_delta') IS NOT NULL DROP EXTERNAL TABLE bronze.vehicle_registration_delta; \nCREATE EXTERNAL TABLE bronze.vehicle_registration_delta(\n    vehicleId           INT,\n    locationId          SMALLINT,\n    propietaryId        TINYINT,\n    dolVehicleId        INT,\n    registrationDate    DATETIME2(7)     \n)\n    WITH (\n        LOCATION = 'bronze/vehicle_registration_delta',      --selecciona la carpeta base ya que delta requiere el uso del directorio _delta_log para funcionar \n        DATA_SOURCE = electric_vehicle_src,\n        FILE_FORMAT = delta_file_format,\n    )\n;\n\nSELECT TOP(100) * FROM bronze.vehicle_registration_delta;\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "electric_vehicle_ldw",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}